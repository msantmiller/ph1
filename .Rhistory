dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F)
)
ph1_pca <- stats::prcomp(
x = ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["outcome_clean"]])) %>%
dplyr::mutate_all(.funs = base::log) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F),
scale. = T)
base::summary(ph1_pca)
ph1_data
ph1_data <-
ph1_data_raw %>% # Clean categorical data
dplyr::mutate(
prev_season_vacc_status = dplyr::case_when(
prev_season_vacc_status == "UKNOWN" |
prev_season_vacc_status == "UNKNOWN" |
prev_season_vacc_status == "UnkNOWN" ~ NA_character_,
T ~ prev_season_vacc_status
)
) %>% dplyr::mutate_at(
.vars = ph1_variables[["categorical_raw"]],
.funs = base::as.factor
) %>% # Clean numeric data
dplyr::mutate_at(
.vars = ph1_variables[["log_raw"]],
.funs = tibble::lst(log = ~dplyr::case_when(
. == 0 ~ 0,
T ~ base::log(.)
))
) %>%
dplyr::mutate(quantity_minus_efficacy = ph1_fc_tot_igg_log - x1_kd_fc_ph1_ha1_log)
ph1_data
ph1_pca <- stats::prcomp(
x = ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["predictor_numeric_clean"]])) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F),
scale. = T)
base::summary(ph1_pca)
ph1_pca <- stats::prcomp(
x = ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["outcome_clean"]])) %>%
dplyr::mutate_all(.funs = base::log) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F),
scale. = T)
base::summary(ph1_pca)
base::rm(list = base::ls())
library(magrittr)
# Load data---------------------------------------------------------------------
get_clean_ph1_data <- function(input_sheet){
googlesheets4::read_sheet(
ss = "https://docs.google.com/spreadsheets/d/1pS3TBai5-lu-xYGRImVZ-AZ250Q8lvLwJ7c0hw2EEA4",
sheet = input_sheet
) %>%
dplyr::rename_all(.funs = stringr::str_to_lower) %>%
janitor::clean_names()
}
ph1_data_raw <- get_clean_ph1_data(input_sheet = "data")
ph1_definitions <-
get_clean_ph1_data(input_sheet = "variable_definitions") %>%
dplyr::filter(status == "Active")
# Create variable subsets-------------------------------------------------------
ph1_variables <- tibble::lst()
for(class_i in c("outcome","predictor")){
for(status_i in c("clean","raw")){
ph1_variables[[base::paste(class_i, status_i, sep = "_")]] <-
ph1_definitions %>%
dplyr::filter(class == stringr::str_to_sentence(class_i)) %>%
purrr::pluck(base::paste(status_i, "name", sep = "_"))
}
}
for(type_i in c("categorical","numeric")){
for(status_i in c("clean","raw")){
ph1_variables[[base::paste(type_i, status_i, sep = "_")]] <-
ph1_definitions %>%
dplyr::filter(type == stringr::str_to_sentence(type_i)) %>%
purrr::pluck(base::paste(status_i, "name", sep = "_"))
ph1_variables[[base::paste("predictor", type_i, status_i, sep = "_")]] <-
ph1_definitions %>%
dplyr::filter(class == "Predictor", type == stringr::str_to_sentence(type_i)) %>%
purrr::pluck(base::paste(status_i, "name", sep = "_"))
}
}
for(status_i in c("clean","raw")){
ph1_variables[[base::paste("log", status_i, sep = "_")]] <-
ph1_definitions %>%
dplyr::filter(transformation == "Log") %>%
purrr::pluck(base::paste(status_i, "name", sep = "_"))
}
# Check distributions of categorical variables----------------------------------
for(variable_i in ph1_variables[["categorical_raw"]]){
tally_i <-
ph1_data_raw %>%
dplyr::group_by_at(.vars = variable_i) %>%
dplyr::tally()
print(variable_i)
print(tally_i)
next_i <- base::readline(prompt = "Next?")
}
plot_i <-
ggplot2::ggplot(data = ph1_data_raw) +
ggplot2::geom_density(
mapping = ggplot2::aes_string(
x = variable_i,
),
fill = "lightblue",
color = "blue"
)
print(variable_i)
print(plot_i)
next_i <- base::readline(prompt = "Next?")
# Clean data--------------------------------------------------------------------
ph1_data <-
ph1_data_raw %>% # Clean categorical data
dplyr::mutate(
prev_season_vacc_status = dplyr::case_when(
prev_season_vacc_status == "UKNOWN" |
prev_season_vacc_status == "UNKNOWN" |
prev_season_vacc_status == "UnkNOWN" ~ NA_character_,
T ~ prev_season_vacc_status
)
) %>% dplyr::mutate_at(
.vars = ph1_variables[["categorical_raw"]],
.funs = base::as.factor
) %>% # Clean numeric data
dplyr::mutate_at(
.vars = ph1_variables[["log_raw"]],
.funs = tibble::lst(log = ~dplyr::case_when(
. == 0 ~ 0,
T ~ base::log(.)
))
) %>%
dplyr::mutate(quantity_minus_efficacy = ph1_fc_tot_igg_log - x1_kd_fc_ph1_ha1_log)
# Check to see if outcomes are correlated with one another----------------------
stats::cor(
ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["outcome_clean"]])) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F)
)
ph1_pca <- stats::prcomp(
x = ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["outcome_clean"]])) %>%
dplyr::mutate_all(.funs = base::log) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F),
scale. = T)
base::summary(ph1_pca)
ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["outcome_clean"]])) %>%
dplyr::mutate_all(.funs = base::log) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F)
ph1_data
ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["outcome_clean"]])) %>%
dplyr::mutate_all(.funs = base::log) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F)
ph1_pca <- stats::prcomp(
x = ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["outcome_clean"]])) %>%
dplyr::mutate_all(.funs = base::log) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F),
scale. = T)
base::summary(ph1_pca)
ph1_pca <- stats::prcomp(
x = ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["outcome_clean"]])) %>%
dplyr::mutate_all(.funs = base::log) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F),
scale. = T)
tats::prcomp(
x = ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["outcome_clean"]])) %>%
dplyr::mutate_all(.funs = base::log) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F),
scale. = T)
stats::prcomp(
x = ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["outcome_clean"]])) %>%
dplyr::mutate_all(.funs = base::log) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F),
scale. = T)
ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["outcome_clean"]])) %>%
dplyr::mutate_all(.funs = base::log) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F)
x = ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["outcome_clean"]])) %>%
dplyr::mutate_all(.funs = base::log) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F)
x
x %>% head(n = 1000)
x %>% print(n = 1000)
ph1_pca <- stats::prcomp(
x = ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["outcome_clean"]])) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F),
scale. = T)
base::summary(ph1_pca)
ph1_pca
ph1_pca <- stats::prcomp(
x = ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["outcome_clean"]])) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F),
scale. = T)
base::summary(ph1_pca)
ph1_mca <- FactoMineR::MCA(
X = ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["predictor_categorical_clean"]])),
graph = F
)
base::summary(ph1_mca)
base::summary(ph1_mca)
ph1_pca <- stats::prcomp(
x = ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["predictor_numeric_clean"]])) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F),
scale. = T)
base::summary(ph1_pca)
stats::cor(
ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["outcome_clean"]])) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F)
)
stats::cor(
ph1_data %>%
dplyr::select(tidyselect::all_of(ph1_variables[["predictor_numeric_clean"]])) %>%
dplyr::filter_all(.vars_predicate = ~base::is.na(.) == F)
)
for(outcome_i in ph1_variables[["outcome_clean"]]){
for(predictor_i in ph1_variables[["predictor_clean"]]){
if(ph1_definitions %>% dplyr::filter(clean_name == predictor_i) %>% purrr::pluck("type") == "Numeric"){
plot_i <-
ggplot2::ggplot(data = ph1_data) +
ggplot2::geom_point(
mapping = ggplot2::aes_string(
x = predictor_i,
y = outcome_i
),
color = "blue"
)
}
if(ph1_definitions %>% dplyr::filter(clean_name == predictor_i) %>% purrr::pluck("type") == "Categorical"){
plot_i <-
ggplot2::ggplot(data = ph1_data) +
ggplot2::geom_density(
mapping = ggplot2::aes_string(
x = outcome_i,
fill = predictor_i
),
alpha = 0.4
)
}
print(paste(outcome_i,"vs.",predictor_i))
print(plot_i)
next_i <- base::readline(prompt = "Next?")
}
}
y = outcome_i
),
color = "blue"
)
}
if(ph1_definitions %>% dplyr::filter(clean_name == predictor_i) %>% purrr::pluck("type") == "Categorical"){
plot_i <-
ggplot2::ggplot(data = ph1_data) +
ggplot2::geom_density(
mapping = ggplot2::aes_string(
x = outcome_i,
fill = predictor_i
),
alpha = 0.4
)
}
print(paste(outcome_i,"vs.",predictor_i))
print(plot_i)
next_i <- base::readline(prompt = "Next?")
}
for(outcome_i in ph1_variables[["outcome_clean"]]){
for(predictor_i in ph1_variables[["predictor_clean"]]){
if(ph1_definitions %>% dplyr::filter(clean_name == predictor_i) %>% purrr::pluck("type") == "Numeric"){
plot_i <-
ggplot2::ggplot(data = ph1_data) +
ggplot2::geom_point(
mapping = ggplot2::aes_string(
x = predictor_i,
y = outcome_i
),
color = "blue"
)
}
if(ph1_definitions %>% dplyr::filter(clean_name == predictor_i) %>% purrr::pluck("type") == "Categorical"){
plot_i <-
ggplot2::ggplot(data = ph1_data) +
ggplot2::geom_density(
mapping = ggplot2::aes_string(
x = outcome_i,
fill = predictor_i
),
alpha = 0.4
)
}
print(paste(outcome_i,"vs.",predictor_i))
print(plot_i)
next_i <- base::readline(prompt = "Next?")
}
}
model <- stats::lm(
formula = x1_kd_fc_ph1_ha1_log ~
x1_kd_d0_ph1_ha1_log + ph1_d0_elispot_log +
x1_kd_d0_ph1_ha1_log*ph1_d0_elispot_log,
data = ph1_data
)
base::summary(model)
ph1_new_data <-
tidyr::expand_grid(
x1_kd_d0_ph1_ha1_log = base::seq(
from = 0,
to = 10,
by = 0.1
),
ph1_d0_elispot_log = base::seq(
from = 0,
to = 10,
by = 0.1
)
)
model_predictions <-
dplyr::bind_cols(
ph1_new_data,
x1_kd_fc_ph1_ha1_log_pred = stats::predict(
object = model,
newdata = ph1_new_data
)
)
plotly::plot_ly() %>%
plotly::add_trace(data = model_predictions,
x = ~x1_kd_d0_ph1_ha1_log,
y = ~ph1_d0_elispot_log,
z = ~x1_kd_fc_ph1_ha1_log_pred,
type = "mesh3d")
ph1_new_data <-
tidyr::expand_grid(
x1_kd_d0_ph1_ha1_log = base::seq(
from = 0,
to = 10,
by = 0.1
),
ph1_d0_elispot_log = base::seq(
from = 0,
to = 10,
by = 0.1
)
)
ph1_new_data
model_predictions
plot_ly(z = ~xtabs(z ~ x + y, data = df)) %>% add_surface()
library(plotly)
plot_ly(z = ~xtabs(z ~ x + y, data = df)) %>% add_surface()
# This is to output a rgl plot in a rmarkdown document.
# setupKnitr()
# Data: the iris data is provided by R
data <- iris
# Add a new column with color
mycolors <- c('royalblue1', 'darkcyan', 'oldlace')
data$color <- mycolors[ as.numeric(data$Species) ]
# Plot
plot3d(
x=data$`Sepal.Length`, y=data$`Sepal.Width`, z=data$`Petal.Length`,
col = data$color,
type = 's',
radius = .1,
xlab="Sepal Length", ylab="Sepal Width", zlab="Petal Length")
library(rgl)
# This is to output a rgl plot in a rmarkdown document.
# setupKnitr()
# Data: the iris data is provided by R
data <- iris
# Add a new column with color
mycolors <- c('royalblue1', 'darkcyan', 'oldlace')
data$color <- mycolors[ as.numeric(data$Species) ]
# Plot
plot3d(
x=data$`Sepal.Length`, y=data$`Sepal.Width`, z=data$`Petal.Length`,
col = data$color,
type = 's',
radius = .1,
xlab="Sepal Length", ylab="Sepal Width", zlab="Petal Length")
install.pacakages("rgl")
install.packages("rgl")
library(rgl)
# This is to output a rgl plot in a rmarkdown document.
# setupKnitr()
# Data: the iris data is provided by R
data <- iris
# Add a new column with color
mycolors <- c('royalblue1', 'darkcyan', 'oldlace')
data$color <- mycolors[ as.numeric(data$Species) ]
# Plot
plot3d(
x=data$`Sepal.Length`, y=data$`Sepal.Width`, z=data$`Petal.Length`,
col = data$color,
type = 's',
radius = .1,
xlab="Sepal Length", ylab="Sepal Width", zlab="Petal Length")
library(rgl)
install.packages("rgl")
library(rgl)
plotly::plot_ly() %>%
plotly::add_trace(data = model_predictions,
x = ~x1_kd_d0_ph1_ha1_log,
y = ~ph1_d0_elispot_log,
z = ~x1_kd_fc_ph1_ha1_log_pred,
type = "mesh3d")
plotly::plot_ly() %>%
plotly::add_trace(data = model_predictions,
x = ~x1_kd_d0_ph1_ha1_log,
y = ~ph1_d0_elispot_log,
z = ~x1_kd_fc_ph1_ha1_log_pred,
type = "marker")
plotly::plot_ly() %>%
plotly::add_trace(data = model_predictions,
x = ~x1_kd_d0_ph1_ha1_log,
y = ~ph1_d0_elispot_log,
z = ~x1_kd_fc_ph1_ha1_log_pred,
type = "scatter")
plotly::plot_ly(data = model_predictions,
x = ~x1_kd_d0_ph1_ha1_log,
y = ~ph1_d0_elispot_log,
z = ~x1_kd_fc_ph1_ha1_log_pred) %>%
plotly::add_markers()
plotly::plot_ly(data = ph1_data,
x = ~x1_kd_d0_ph1_ha1_log,
y = ~ph1_d0_elispot_log,
z = ~x1_kd_fc_ph1_ha1_log) %>%
plotly::add_markers()
plotly::plot_ly() %>%
plotly::add_trace(data = model_predictions,
x = ~x1_kd_d0_ph1_ha1_log,
y = ~ph1_d0_elispot_log,
z = ~x1_kd_fc_ph1_ha1_log_pred,
type = "mesh3d")
plotly::plot_ly(data = ph1_data,
x = ~x1_kd_d0_ph1_ha1_log,
y = ~ph1_d0_elispot_log,
z = ~x1_kd_fc_ph1_ha1_log) %>%
plotly::add_markers()
ph1_new_data <-
tidyr::expand_grid(
x1_kd_d0_ph1_ha1_log = base::seq(
from = 0,
to = 6,
by = 0.1
),
ph1_d0_elispot_log = base::seq(
from = 0,
to = 10,
by = 0.1
)
)
model_predictions <-
dplyr::bind_cols(
ph1_new_data,
x1_kd_fc_ph1_ha1_log_pred = stats::predict(
object = model,
newdata = ph1_new_data
)
)
plotly::plot_ly() %>%
plotly::add_trace(data = model_predictions,
x = ~x1_kd_d0_ph1_ha1_log,
y = ~ph1_d0_elispot_log,
z = ~x1_kd_fc_ph1_ha1_log_pred,
type = "mesh3d")
plotly::plot_ly(data = ph1_data,
x = ~x1_kd_d0_ph1_ha1_log,
y = ~ph1_d0_elispot_log,
z = ~x1_kd_fc_ph1_ha1_log) %>%
plotly::add_markers()
plotly::plot_ly(data = ph1_data,
x = ~x1_kd_d0_ph1_ha1_log,
y = ~ph1_d0_elispot_log,
z = ~x1_kd_fc_ph1_ha1_log,
marker = list(color = ~ph1_d0_elispot, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
plotly::add_markers()
plotly::plot_ly(data = ph1_data,
x = ~x1_kd_d0_ph1_ha1_log,
y = ~ph1_d0_elispot_log,
z = ~x1_kd_fc_ph1_ha1_log,
marker = list(color = ~ph1_d0_elispot_log, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
plotly::add_markers()
plotly::plot_ly(data = ph1_data,
x = ~x1_kd_d0_ph1_ha1_log,
y = ~ph1_d0_elispot_log,
z = ~x1_kd_fc_ph1_ha1_log,
marker = list(color = ~ph1_d0_elispot_log, colorscale = c('#683531','#FFE1A1'),
showscale = TRUE)) %>%
plotly::add_markers()
plotly::plot_ly(data = ph1_data,
x = ~x1_kd_d0_ph1_ha1_log,
y = ~ph1_d0_elispot_log,
z = ~x1_kd_fc_ph1_ha1_log,
marker = list(color = ~ph1_d0_elispot_log, colorscale = c('#683531','#FFE1A1'),
showscale = TRUE)) %>%
plotly::add_markers()
plotly::plot_ly(data = ph1_data,
x = ~x1_kd_d0_ph1_ha1_log,
y = ~ph1_d0_elispot_log,
z = ~x1_kd_fc_ph1_ha1_log,
marker = list(color = ~x1_kd_d0_ph1_ha1_log, colorscale = c('#683531','#FFE1A1'),
showscale = TRUE)) %>%
plotly::add_markers()
ph1_data
